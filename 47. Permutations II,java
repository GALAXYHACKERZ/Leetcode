import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> currentPermutation = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        Arrays.sort(nums);
        backtrack(nums, visited, currentPermutation, result);
        return result;
    }

    private void backtrack(int[] nums, boolean[] visited,
                           List<Integer> currentPermutation, List<List<Integer>> result) {
        if (currentPermutation.size() == nums.length) {
            result.add(new ArrayList<>(currentPermutation));
            return;
        }

        for (int i = 0; i < nums.length; ++i) {
            if (visited[i]) {
                continue;
            }
            if (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) {
                continue;
            }

            currentPermutation.add(nums[i]);
            visited[i] = true;
            backtrack(nums, visited, currentPermutation, result);
            visited[i] = false;
            currentPermutation.remove(currentPermutation.size() - 1);
        }
    }
}
